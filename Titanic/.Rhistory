source('~/.active-rstudio-document')
confusionMatrix(table(pred1,vowel.test$y))
confusionMatrix(table(pred2,vowel.test$y))
confusionMatrix(table(pred1,vowel.test$y))
confusionMatrix(table(pred2,vowel.test$y))
df<-data.frame(pred1=pred1,pred2=pred2,y=vowel.test$y)
modFit<-train(y~pred1+pred2,data=df,method="gam")
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test)
confusionMatrix(table(pred,vowel.test))
confusionMatrix(pred,vowel.test$y)
pred<-predict(modFit,df)
table(pred)
modFit
str(df)
class(pred1)
table(pred1)
table(pred2)
table(level(pred2)[pred2])
table(levels(pred2)[pred2])
class(levels(pred2)[pred2])
class(as.numeric(levels(pred2)[pred2]))
df<-data.frame(pred1=as.numeric(levels(pred1)[pred1]),pred2=as.numeric(levels(pred2)[pred2]),y=vowel.test$y)
str(df)
modFit<-train(y~pred1+pred2,data=df,method="gam")
modFit<-train(y~pred1+pred2,data=df,method="gam")
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test$y)
head(df)
str(df)
table(pred1,pred2)
confusionMatrix(pred1,pred2)
G<-ggplot(df,aes(pred1,pred2,col=y))
G+geom_point()
G+geom_point(gitter)
G+geom_point("gitter")
G+geom_point(aes("gitter")
)
G+geom_jitter()
modFit
modFit<-train(y~pred1+pred2,data=df)
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test$y)
modFit<-train(y~.,data=df)
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test$y)
modFit<-train(y~.,data=df,method="gam")
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test$y)
df<-data.frame(pred1,pred2,y=vowel.test$y)
modFit<-train(y~.,data=df,method="gam")
pred<-predict(modFit,df)
confusionMatrix(pred,vowel.test$y)
confusionMatrix(pred1,vowel.test$y)
set.seed(33833)
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
modFit1<-train(y~.,data=vowel.train,method="rf")
modFit2<-train(y~.,data=vowel.train,method="gbm")
pred1<-predict(modFit1,vowel.test)
pred2<-predict(modFit2,vowel.test)
confusionMatrix(pred1,vowel.test$y)
confusionMatrix(pred2,vowel.test$y)
confusionMatrix(pred1,pred2)
source('~/.active-rstudio-document')
rm(list=ls())
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
modFit<-train(diagnosis~.,data=df,method="rf")
pred<-predict(modFit,df)
confusionMatrix(pred1,testing$diagnosis)$overall[1]
confusionMatrix(pred2,testing$diagnosis)$overall[1]
confusionMatrix(pred3,testing$diagnosis)$overall[1]
confusionMatrix(pred,testing$diagnosis)$overall[1]
modFit<-train(diagnosis~.,data=df,method="rf")
table(pred1,testing$diagnosis)
table(pred2,testing$diagnosis)
table(pred3,testing$diagnosis)
confusionMatrix(pred1,testing$diagnosis)$overall[1]
confusionMatrix(pred2,testing$diagnosis)$overall[1]
confusionMatrix(pred3,testing$diagnosis)$overall[1]
confusionMatrix(pred,testing$diagnosis)$overall[1]
?prop.table
prop.table(pred3,testing$diagnosis)
prop.table((pred3,testing$diagnosis),2)
prop.table(table(pred3,testing$diagnosis),2)
prop.table(table(pred3,testing$diagnosis),1)
df<-data.frame(pred1,pred2,pred3,testing$diagnosis)
str(df)
modFit<-train(diagnosis~.,data=df,method="rf")
length(pred1)
length(pred2)
length(pred3)
table(pred3)
df<-data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
str(df)
modFit<-train(diagnosis~.,data=df,method="rf")
pred<-predict(modFit,df)
confusionMatrix(pred1,testing$diagnosis)$overall[1]
confusionMatrix(pred2,testing$diagnosis)$overall[1]
confusionMatrix(pred3,testing$diagnosis)$overall[1]
confusionMatrix(pred,testing$diagnosis)$overall[1]
rm(list=ls())
source('~/.active-rstudio-document')
names(training)
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q1.R')
confusionMatrix(pred1,vowel.test$y)$overall[1]
confusionMatrix(pred2,vowel.test$y)$overall[1]
confusionMatrix(pred1,pred2)$overall[1]
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q2.R')
confusionMatrix(pred1,testing$diagnosis)$overall[1]
confusionMatrix(pred2,testing$diagnosis)$overall[1]
confusionMatrix(pred3,testing$diagnosis)$overall[1]
confusionMatrix(pred,testing$diagnosis)$overall[1]
rm(list=ls())
?plot.enet
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q3.R')
?plot.enet
str(training)
set.seed(233)
modFit<-train(CompressiveStrength~.,data=training,method="lass")
set.seed(233)
modFit<-train(CompressiveStrength~.,data=training,method="lasso")
?plot.enet
modFit
testIFt<-lm(CompressiveStrength~.,data=training)
testFit
testIFt
plot.enet(modFIt)
library(elasticnet)
plot.enet(modFit)
plot.enet(testIFt)
summary(testIFt)
summary(modFit)
summary(modFit)$penalty
summary(modFit)[11]
summary(modFit)[11,]
summary(modFit)[10]
summary(modFit)$tuneValue
summary(modFit)$tuneValue
?lasso
summary(modFit)[[1]]
summary(modFit)[[2]]
summary(modFit)[[10]]
summary(modFit)[[11]]
str(modFit)
modFit$finalModel
modFit
plot.enet(modFit$finalModel)
url="https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(url,"gaData.csv")
library(lubridate) # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
head(dat)
plot(tstrain)
head(tstrain)
install.packages("forcast")
install.packages("forecast")
library(forecast)
?bats
?forecast
source('~/.active-rstudio-document')
pred<-forecast(modFit)
pred
head(testing)
head(gaData)
head(dat)
pred<-forecast(modFit,h=dim(testing)[1])
head(pred)
pred
dim(pred)
class(pred)
pred<-forecast(modFit,h=20,level=95)
pred
pred[1]
summary(pred)
plot(pred)
tstest = ts(testing$visitsTumblr)
plot(tstest)
?ts
tstest = ts(testing$visitsTumblr,start=366)
plot(tstest)
line(pred)
plot(pred)
line(tstest)
lines(tstest)
pred<-forecast(modFit,h=nrow(testing),level=95)
plot(pred)
lines(tstest)
pred$upper
table(tstest<pred$upper)
prop.table(tstest<pred$upper)
t<-table(tstest<pred$upper)
prop.table(t)
t<-table(tstest<pred$upper$tstest>pred$lower)
t<-table(tstest<pred$upper&tstest>pred$lower)
prop.table(t)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
head(training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
modFit<-svm(CompressiveStrength~.,data=training)
predict(modFit,testing)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
modFit<-svm(CompressiveStrength~.,data=training)
pred<-predict(modFit,testing)
summary(modFit)
modFit
sqrt(sum(pred-testing$CompressiveStrength)^2)
source('~/.active-rstudio-document')
sqrt(sum(pred-testing$CompressiveStrength)^2)
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q3.R')
source('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C8Week4/Q3.R')
plot.enet(modFit$finalModel,xvar="penalty".use.color=TRUE)
plot.enet(modFit$finalModel,xvar="penalty",use.color=TRUE)
accuracy(pred,testing$CompressiveStrength)
accuracy(pred,testing$CompressiveStrength)$RMSE
shiny::runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp()
runApp()
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/BrushDemo')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
runApp('C9Week1/Infarct')
getwd()
install.packages("plotly")
library(plotly)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
data(mtcars)
head(mtcars)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
library(plotly)
plot_ly(mtcars,x=wt,y=mpg,mode="markers")
?plot_ly
plot_ly(data=mtcars,x=wt,y=mpg,mode="markers")
plot_ly(data=mtcars,x=~wt,y=~mpg,mode="markers")
load("C:/Users/Wang Xiaoyuan/Desktop/Coursera/specdata/.RData")
knitr::opts_chunk$set(echo = TRUE)
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
dim(training)
index<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
selected<-names(training)[!index]
training<-training[,selected]
training<-training[,-c(1:6)]
str(training)
library(caret)
?datapartition
inTrain<-createDataPartition(training$classe,p=0.8)
subtaining<-training[inTrain,]
inTrain<-createDataPartition(training$classe,p=0.8,list=FALSE)
subtaining<-training[inTrain,]
subtraining<-training[inTrain,]
subValidation<-training[-inTrain,]
modFit1<-train(classe~.,data=subtraining,method="rpart")
modFit1
corr(subtraining)
cor(subtraining)
rm("subtaining")
str(subtraining)
preObj<-preProcess(subtraining,method=c("center","scale"))
preObj
preObj$centered
summary(preObj)
psub<-predict(preObj,subtraining)
str(psub)
range(psub)
str(psub$roll_belt)
range(psub$roll_belt)
range(psub$gyros_forearm_y)
modFit1<-train(classe~.,data=subtraining,method="rpart")
rm("preObj")
rm("psub")
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(DataExplorer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(caret))
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
dim(training)
t<-table(sapply(training,class))
t
```{r,comment=""}
## index1 checks the missing value in integer and numeric varibles
index1<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
training<-training[,!index1]
## index2 checks the missing value in factor varibles
index2<-apply(training,2,function(x){sum(x=="")/length(x)>0.95})
training<-training[,!index2]
training<-training[,-c(1,3:7)]
dim(training)
inTrain<-createDataPartition(training$classe,p=0.8,list=FALSE)
subtrain<-training[inTrain,]
subVali<-training[-inTrain,]
modFit1<-train(classe~.,data=subtrain,method="rpart")
modFit2<-train(classe~.,data=subtrain,method="glm")
inTrain<-createDataPartition(training$classe,p=0.8,list=FALSE)
subtrain<-training[inTrain,]
subVali<-training[-inTrain,]
modFit1<-train(classe~.,data=subtrain,method="rpart")
modFit2<-train(classe~.,data=subtrain,method="rf",trControl=trainControl(method="cv"),number=3)
confusionMatrix(predict(modFit1,subVali),subVali$classe)
confusionMatrix(predict(modFit2,subVali),subVali$classe)
modFit2<-train(classe~.,data=subtrain,method="rf",trControl=trainControl(method="cv"),number=3)
confusionMatrix(predict(modFit1,subVali),subVali$classe)
confusionMatrix(predict(modFit2,subVali),subVali$classe)
predict(modFit2,testing)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(DataExplorer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(caret))
if(! file.exists("training.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","training.csv")
if(! file.exists("testing.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","testing.csv")
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
dim(training)
t<-table(sapply(training,class))
t
plot_missing(training)
## index1 checks the missing value in integer and numeric varibles
index1<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
training<-training[,!index1]
## index2 checks the missing value in factor varibles
index2<-apply(training,2,function(x){sum(x=="")/length(x)>0.95})
training<-training[,!index2]
training<-training[,-c(1,3:7)]
dim(training)
inTrain<-createDataPartition(training$classe,p=0.8,list=FALSE)
subtrain<-training[inTrain,]
subVali<-training[-inTrain,]
modFit1<-train(classe~.,data=subtrain,method="rpart")
inTrain<-createDataPartition(training$classe,p=0.8,list=FALSE)
subtrain<-training[inTrain,]
subVali<-training[-inTrain,]
modFit1<-train(classe~.,data=subtrain,method="rpart",trControl=trainControl(method="cv"),number=3)
modFit1<-train(classe~.,data=subtrain,method="rpart",trControl=trainControl(method="cv",number=3))
confusionMatrix(predict(modFit1,subVali),subVali$classe)
modFit1<-train(classe~.,data=subtrain,method="rpart",trControl=trainControl(method="cv",number=10))
confusionMatrix(predict(modFit1,subVali),subVali$classe)
modFit1<-train(classe~.,data=subtrain,method="rpart",trControl=trainControl(method="cv"),number=10)
confusionMatrix(predict(modFit1,subVali),subVali$classe)
modFit2<-train(classe~.,data=subtrain,method="rf",trControl=trainControl(method="cv"),number=3)
confusionMatrix(predict(modFit2,subVali),subVali$classe)
modFit2
modFit1<-train(classe~.,data=subtrain,method="rpart",trControl=trainControl(method="cv"))
modFit1
confusionMatrix(predict(modFit1,subVali),subVali$classe)
modFit1<-train(classe~.,data=subtrain,method="rpart")
modFit1
confusionMatrix(predict(modFit1,subVali),subVali$classe)
modFit2<-train(classe~.,data=subtrain,method="rf",trControl=trainControl(method="cv"))
modFit2
confusionMatrix(predict(modFit2,subVali),subVali$classe)
summary(modFit2)
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
dim(training)
t<-table(sapply(training,class))
t
plot_missing(training)
## index1 checks the missing value in integer and numeric varibles
index1<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
training<-training[,!index1]
## index2 checks the missing value in factor varibles
index2<-apply(training,2,function(x){sum(x=="")/length(x)>0.95})
training<-training[,!index2]
training<-training[,-c(1,3:7)]
dim(training)
traincontrol<-trainControl(method="cv")
modFit1<-train(classe~.,data=training,method="rpart",trControl=traincontrol)
modFit2<-train(classe~.,data=training,method="rf",trControl=traincontrol)
modFit1
modFit2
predict(modFit2,testing)
modFit3<-train(classe~.,data=training,method="rf")
modFit3<-train(classe~.,data=training,method="rf")
modFit3
modFit3<-train(classe~.,data=training)
modFit3<-train(classe~.,data=training,method="party")
modFit3<-train(classe~.,data=training,method="gbm",trControl=traincontrol)
modFit4<-train(classe~.,data=training,method="lda",trControl=traincontrol)
modFit3
modFit4
getwd()
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(DataExplorer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(caret))
if(! file.exists("training.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","training.csv")
if(! file.exists("testing.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","testing.csv")
getwd()
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(DataExplorer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(caret))
if(! file.exists("training.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","training.csv")
if(! file.exists("testing.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","testing.csv")
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
dim(training)
t<-table(sapply(training,class))
t
plot_missing(training)
## index1 checks the missing value in integer and numeric varibles
index1<-apply(training,2,function(x){sum(is.na(x))/length(x)>0.95})
training<-training[,!index1]
## index2 checks the missing value in factor varibles
index2<-apply(training,2,function(x){sum(x=="")/length(x)>0.95})
training<-training[,!index2]
training<-training[,-c(1,3:7)]
dim(training)
traincontrol<-trainControl(method="cv")
modFit1<-train(classe~.,data=training,method="rpart",trControl=traincontrol)
modFit2<-train(classe~.,data=training,method="rf",trControl=traincontrol)
modFit3<-train(classe~.,data=training,method="gbm",trControl=traincontrol,verbose=FALSE)
modFit4<-train(classe~.,data=training,method="lda",trControl=traincontrol)
modFit1
modFit2
modFit3
modFit4
result<-predict(modFit2,testing)
result
rm(list=ls())
getwd()
setwd("../Kaggle")
dir
dir()
setwd("Titanic")
dir
dir()
train<-read.csv("train.csv")
head(train)
summary(train)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(caret))
suppressMessages(library(DataExplorer))
if (!file.exists("train.csv"))
download.file("https://www.kaggle.com/c/titanic/download/train.csv","train.csv")
if (!file.exists("test.csv"))
download.file("https://www.kaggle.com/c/titanic/download/test.csv","test.csv")
train<-read.csv("train.csv")
test<-read.csv("test.csv")
summary(train)
plot_missing(train)
plot_missing(test)
plot_missing(test)
summary(train)
summary(test)
test$Survived<-rep(NA,dim(test)[1])
total<-rbind(train,test)
plot_missing(total)
plot_missing(total)
range(total$Fare)
table(is.na(total$Fare))
table(is.na(total$Age))
range(is.na(total$Age))
range(total$Age)
table(total$Age)
?knnImpute
?knnImpute
kNNIMpute
?kNNIMpute
pp<-preProcess(train[,-2],method="knnImpute")
predict(pp,train[,-2])
i<-predict(pp,train[,-2])
summary(i)
summary(train)
